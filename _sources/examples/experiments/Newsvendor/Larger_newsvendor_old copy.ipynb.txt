{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Learning Uncertainty Sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import cvxpy as cp\n",
    "import scipy as sc\n",
    "import numpy as np\n",
    "import numpy.random as npr\n",
    "import torch\n",
    "from sklearn import datasets\n",
    "import pandas as pd\n",
    "import lropt\n",
    "import sys\n",
    "sys.path.append('..')\n",
    "from utils import plot_tradeoff,plot_iters\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "plt.rcParams.update({\n",
    "    \"text.usetex\":True,\n",
    "    \n",
    "    \"font.size\":18,\n",
    "    \"font.family\": \"serif\"\n",
    "})\n",
    "colors = [\"tab:blue\", \"tab:green\", \"tab:orange\", \n",
    "          \"blue\", \"tab:purple\", \"tab:brown\", \"tab:pink\", \"tab:grey\", \"red\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_vio_target:  0.030533333468250875 \n",
      "train_vio_target:  0.02995333351660515 \n",
      "test_obj_target:  -130.11514124883664 \n",
      "test_vio:  0.0003133333371952146 \n",
      "train_vio:  0.0 \n",
      "test_obj:  -96.27419802587139 \n",
      "test_cvar:  -0.0016150850905060936 \n",
      "train_cvar:  -0.019516959125728716\n"
     ]
    }
   ],
   "source": [
    "print(\"test_vio_target: \", np.mean(np.mean(reshaped_table[:,1].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio_target: \", np.mean(np.mean(reshaped_table[:,2].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj_target: \", np.mean(np.mean(reshaped_table[:,0].reshape(-1, 5), axis=1)),\"\\n\"\"test_vio: \", np.mean(np.mean(reshaped_table[:,7].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio: \", np.mean(np.mean(reshaped_table[:,8].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj: \", np.mean(np.mean(reshaped_table[:,6].reshape(-1, 5), axis=1)),\"\\n\"\"test_cvar: \", np.mean(np.mean(reshaped_table[:,4].reshape(-1, 5), axis=1)),\"\\n\"\"train_cvar: \",np.mean(np.mean(reshaped_table[:,3].reshape(-1, 5), axis=1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_vio_target:  0.030453333570621865 \n",
      "train_vio_target:  0.030006666737608573 \n",
      "test_obj_target:  -44.111422808726445 \n",
      "test_vio:  0.0007266666758805464 \n",
      "train_vio:  0.00034000000823288646 \n",
      "test_obj:  -5.671988895053987 \n",
      "test_cvar:  -0.053975080003352084 \n",
      "train_cvar:  -0.07688430724272212\n"
     ]
    }
   ],
   "source": [
    "print(\"test_vio_target: \", np.mean(np.mean(standard_table[:,1].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio_target: \", np.mean(np.mean(standard_table[:,2].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj_target: \", np.mean(np.mean(standard_table[:,0].reshape(-1, 5), axis=1)),\"\\n\"\"test_vio: \", np.mean(np.mean(standard_table[:,7].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio: \", np.mean(np.mean(standard_table[:,8].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj: \", np.mean(np.mean(standard_table[:,6].reshape(-1, 5), axis=1)),\"\\n\"\"test_cvar: \", np.mean(np.mean(standard_table[:,4].reshape(-1, 5), axis=1)),\"\\n\"\"train_cvar: \",np.mean(np.mean(standard_table[:,3].reshape(-1, 5), axis=1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0006159719399999998"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(np.mean(standard_table[:,11].reshape(-1, 5), axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0005384208333333334"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(np.mean(reshaped_table[:,11].reshape(-1, 5), axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "standard_table = pd.read_csv(\"standard_table_2.csv\").iloc[:,1:].values\n",
    "reshaped_table = pd.read_csv(\"reshaped_table_2.csv\").iloc[:,1:].values\n",
    "totalvios = np.load(\"totalvios2.npy\")\n",
    "totalvios_train = np.load(\"totalvios_train2.npy\")\n",
    "totalobjs = np.load(\"totalobjs2.npy\")\n",
    "totaltime = np.load(\"totaltime2.npy\")\n",
    "sg_vals = np.load(\"sg_vals1.npy\")\n",
    "reshaped_table = reshaped_table[1:]\n",
    "standard_table = standard_table[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DRO =  0.030900000231340527 -105.920236065914 0.15341054081999997\n"
     ]
    }
   ],
   "source": [
    "print(\"DRO = \", np.mean(totalvios, axis = 0)[3] , np.mean(totalobjs,axis = 0)[3], np.mean(totaltime, axis = 0)[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DRO =  0.00012000000197440385 -63.511619555785515 0.15704018218000024\n",
      "SG =  0.001846666693687439 -150.85604686039022 0.016142951410000002\n",
      "0.06\n",
      "0.09\n",
      "0.0\n",
      "0.15\n"
     ]
    }
   ],
   "source": [
    "print(\"DRO = \", np.mean(totalvios, axis = 0)[5] , np.mean(totalobjs,axis = 0)[5], np.mean(totaltime, axis = 0)[5])\n",
    "print(\"SG = \", np.mean(sg_vals[:,0]), np.mean(sg_vals[:,1]),np.mean(sg_vals[:,2]))\n",
    "print(np.mean(np.mean(standard_table[:,1].reshape(-1, 5), axis=1) >= 0.05))\n",
    "print(np.mean(np.mean(reshaped_table[:,1].reshape(-1, 5), axis=1) >= 0.05))\n",
    "print(np.mean(sg_vals[:,0] >= 0.05))\n",
    "print(np.mean(np.mean(totalvios[:,3].reshape(-1, 5), axis=1) > 0.05))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Formulate constants\n",
    "n = 15\n",
    "N = 300\n",
    "np.random.seed(399)\n",
    "k = npr.uniform(2,5,n)\n",
    "p = k + npr.uniform(0.5,2,n)\n",
    "k1 = npr.uniform(1,3,n)\n",
    "p1 = k1 + npr.uniform(0,2,n)\n",
    "k_tch = torch.tensor(k, requires_grad = True)\n",
    "# p_tch = torch.tensor(p, requires_grad = True)\n",
    "k1_tch = torch.tensor(k1, requires_grad = True)\n",
    "p1_tch = torch.tensor(p1, requires_grad = True)\n",
    "\n",
    "def loss(t,y,x, x1, p_tch, alpha, data, mu = 100, l=1000, quantile = 0.95, target = 0.):\n",
    "    sums =  torch.mean(torch.maximum(\n",
    "        torch.maximum(k_tch@x -data@p_tch, k_tch@x - p_tch@x) - t-alpha, \n",
    "        torch.tensor(0.,requires_grad = True)))+ torch.mean(torch.maximum(\n",
    "        torch.maximum(k1_tch@x1 -data@p1_tch, k1_tch@x1 - p1_tch@x) - y-alpha, \n",
    "        torch.tensor(0.,requires_grad = True)))\n",
    "    sums = sums/(2*(1-quantile)) + alpha\n",
    "    return t +y + l*(sums - target) + (mu/2)*(sums - target)**2, t+y, 0.5*torch.mean((torch.maximum(\n",
    "        torch.maximum(k_tch@x -data@p_tch, k_tch@x - p_tch@x) - t, \n",
    "        torch.tensor(0.,requires_grad = True))>=0.001).float()) + 0.5*torch.mean((torch.maximum(\n",
    "        torch.maximum(k1_tch@x1 -data@p1_tch, k1_tch@x1 - p1_tch@x) - y, \n",
    "        torch.tensor(0.,requires_grad = True))>=0.001).float()), sums.detach().numpy()\n",
    "\n",
    "\n",
    "def loss(t,y,x, x1, p_tch, alpha, data, mu = 100, l=1000, quantile = 0.95, target = 0.):\n",
    "    Nsample = data.shape[0]\n",
    "    sums =  torch.mean(torch.maximum(torch.maximum(\n",
    "        torch.maximum(k_tch@x -data@p_tch, k_tch@x - p_tch@x) - t-alpha, \n",
    "        torch.tensor(0.,requires_grad = True)), \n",
    "        torch.maximum(k1_tch@x1 -data@p1_tch, k1_tch@x1 - p1_tch@x) - y-alpha))\n",
    "    sums = sums/(1-quantile) + alpha\n",
    "    return t +y + l*(sums - target) + (mu/2)*(sums - target)**2, t+y, torch.sum((torch.maximum(torch.maximum(\n",
    "        torch.maximum(k_tch@x -data@p_tch, k_tch@x - p_tch@x) - t-alpha, \n",
    "        torch.tensor(0.,requires_grad = True)), \n",
    "        torch.maximum(k1_tch@x1 -data@p1_tch, k1_tch@x1 - p1_tch@x) - y-alpha))>= torch.tensor(1.))/Nsample, sums.detach().numpy()\n",
    "\n",
    "\n",
    "def gen_demand(n, N, seed=399):\n",
    "    np.random.seed(seed)\n",
    "    F = np.random.normal(size = (n,2))\n",
    "    sig = 0.1*F@(F.T)\n",
    "    mu = np.random.uniform(-0.2,2,n)\n",
    "    norms = np.random.multivariate_normal(mu,sig, N)\n",
    "    d_train = np.exp(norms)\n",
    "    return mu, sig, d_train\n",
    "\n",
    "# Generate data\n",
    "mu, sig, data = gen_demand(n,N*2)\n",
    "\n",
    "scenarios = {}\n",
    "num_scenarios = 5\n",
    "for scene in range(num_scenarios):\n",
    "    np.random.seed(scene+1)\n",
    "    scenarios[scene] = {}\n",
    "    scenarios[scene][0] = p + np.random.normal(0,1,n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(16)\n",
    "data = np.exp(np.random.multivariate_normal(mu,sig, N*2))\n",
    "# Formulate uncertainty set\n",
    "u = lropt.UncertainParameter(n,\n",
    "                        uncertainty_set=lropt.Ellipsoidal(p=2,\n",
    "                                                    data=data, loss = loss))\n",
    "# Formulate the Robust Problem\n",
    "x_r = cp.Variable(n)\n",
    "x_1 = cp.Variable(n)\n",
    "t = cp.Variable()\n",
    "y = cp.Variable()\n",
    "p = cp.Parameter(n)\n",
    "# p1 = cp.Parameter(n)\n",
    "p.value = scenarios[0][0]\n",
    "# p1.value = scenarios[0][1]\n",
    "objective = cp.Minimize(t+y)\n",
    "\n",
    "\n",
    "# constraints = [cp.maximum(k@x_r - p@x_r, k@x_r - p@u) <= t]\n",
    "# constraints += [cp.maximum(k1@x_1 - p1@x_1, k1@x_1 - p1@u) <= y]\n",
    "constraints = [cp.maximum(k@x_r - p@x_r - t, k@x_r - p@u - t,k1@x_1 - p1@x_1 - y,  k1@x_1 - p1@u - y) <= 0]\n",
    "\n",
    "constraints += [x_r >= 0, x_r >= x_1]\n",
    "\n",
    "prob = lropt.RobustProblem(objective, constraints)\n",
    "target = -0.015\n",
    "test_p = 0.5\n",
    "s = 5\n",
    "train, test = train_test_split(data, test_size=int(data.shape[0]*test_p), random_state=s)\n",
    "init = sc.linalg.sqrtm(sc.linalg.inv(np.cov(train.T)))\n",
    "init_bval = -init@np.mean(train, axis=0)\n",
    "# Train A and b\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_tradeoff(dfgrid,dfgrid2,\"News\",ind_1=(0,65),ind_2=(0,100) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def eval(t,y,x, x1, p1, p,data):\n",
    "    t = torch.tensor(t)\n",
    "    y = torch.tensor(y)\n",
    "    x = torch.tensor(x)\n",
    "    x1 = torch.tensor(x1)\n",
    "    p_tch = torch.tensor(p)\n",
    "    p1 = torch.tensor(p1)\n",
    "    data = torch.tensor(data)\n",
    "    return 0.5*torch.mean((torch.maximum(\n",
    "        torch.maximum(k_tch@x -data@p_tch, k_tch@x - p_tch@x) - t, \n",
    "        torch.tensor(0.,requires_grad = True))>=0.0001).float()) + 0.5*torch.mean((torch.maximum(\n",
    "        torch.maximum(k1_tch@x1 -data@p1, k1_tch@x1 - p1@x) - y, \n",
    "        torch.tensor(0.,requires_grad = True))>=0.0001).float())\n",
    "\n",
    "def eval(t,y,x, x1, p1, p,data):\n",
    "    t = torch.tensor(t)\n",
    "    y = torch.tensor(y)\n",
    "    x = torch.tensor(x)\n",
    "    x1 = torch.tensor(x1)\n",
    "    p = torch.tensor(p)\n",
    "    p1 = torch.tensor(p1)\n",
    "    data = torch.tensor(data)\n",
    "    Nsample = data.shape[0]\n",
    "    return torch.sum((torch.maximum(torch.maximum(\n",
    "        torch.maximum(k_tch@x -data@p, k_tch@x - p@x) - t, \n",
    "        torch.tensor(0.,requires_grad = True)), \n",
    "        torch.maximum(k1_tch@x1 -data@p1, k1_tch@x1 - p1@x) - y))>= torch.tensor(1.))/Nsample\n",
    "\n",
    "def make_table(result_A,result_b, dfgrid,test, value,eps, cvar_train, cvar_test):\n",
    "    trial1 = np.zeros((num_scenarios,6))\n",
    "    for scene in range(num_scenarios):\n",
    "        # formulate the ellipsoidal set\n",
    "        if eps:\n",
    "          r_eps = 1\n",
    "        else:\n",
    "          r_eps = dfgrid['Eps'][np.absolute(np.mean(np.vstack(dfgrid['Violations_train']),axis = 1)-value).argmin()]\n",
    "        u = lropt.UncertainParameter(n,\n",
    "                                    uncertainty_set = lropt.Ellipsoidal(p=2, \n",
    "                                                                    rho=1., A = (1/r_eps)*result_A, b=(1/r_eps)*result_b))\n",
    "        # Formulate the Robust Problem\n",
    "        x_r = cp.Variable(n)\n",
    "        x_1 = cp.Variable(n)\n",
    "        t = cp.Variable()\n",
    "        y = cp.Variable()\n",
    "        p = cp.Parameter(n)\n",
    "        # p1 = cp.Parameter(n)\n",
    "        p.value = scenarios[scene][0]\n",
    "        # p1.value = scenarios[0][1]\n",
    "        objective = cp.Minimize(t+y)\n",
    "\n",
    "        constraints = [cp.maximum(k@x_r - p@x_r - t, k@x_r - p@u - t,k1@x_1 - p1@x_1 - y,  k1@x_1 - p1@u - y) <= 0]\n",
    "        # constraints = [cp.maximum(k@x_r - p@x_r, k@x_r - p@u) <= t]\n",
    "        # constraints += [cp.maximum(k1@x_1 - p1@x_1, k1@x_1 - p1@u) <= y]\n",
    "\n",
    "        constraints += [x_r >= 0, x_r >= x_1]\n",
    "\n",
    "        prob = lropt.RobustProblem(objective, constraints)\n",
    "        newprob = prob.dualize_constraints()\n",
    "        newprob.solve()\n",
    "        trial1[scene,0] = newprob.objective.value\n",
    "        trial1[scene,1] = eval(t.value,y.value,x_r.value, x_1.value,p1,p.value,test).item()\n",
    "        trial1[scene,2] = eval(t.value,y.value,x_r.value, x_1.value,p1,p.value,train).item()\n",
    "        trial1[scene,3] = cvar_train\n",
    "        trial1[scene,4] = cvar_test\n",
    "        trial1[scene,5] = newprob.solver_stats.solve_time\n",
    "    return trial1\n",
    "def mro(train, test, K = 300, rho = 1):\n",
    "    vios = np.zeros((num_scenarios))\n",
    "    vios_1 = np.zeros((num_scenarios))\n",
    "    objs = np.zeros((num_scenarios))\n",
    "    time = np.zeros((num_scenarios))\n",
    "    for scene in range(num_scenarios):\n",
    "        u = lropt.UncertainParameter(n,\n",
    "                                          uncertainty_set = lropt.MRO(train = False, data = train, rho = rho, A = None, K = K))\n",
    "            # Formulate the Robust Problem\n",
    "        x_r = cp.Variable(n)\n",
    "        x_1 = cp.Variable(n)\n",
    "        t = cp.Variable()\n",
    "        y = cp.Variable()\n",
    "        p = cp.Parameter(n)\n",
    "        # p1 = cp.Parameter(n)\n",
    "        p.value = scenarios[scene][0]\n",
    "        # p1.value = scenarios[0][1]\n",
    "        objective = cp.Minimize(t+y)\n",
    "\n",
    "        constraints = [cp.maximum(k@x_r - p@x_r - t, k@x_r - p@u - t,k1@x_1 - p1@x_1 - y,  k1@x_1 - p1@u - y) <= 0]\n",
    "\n",
    "        constraints += [x_r >= 0, x_r >= x_1]\n",
    "\n",
    "        prob = lropt.RobustProblem(objective, constraints)\n",
    "        newprob = prob.dualize_constraints()\n",
    "        newprob.solve()\n",
    "        objs[scene] = newprob.objective.value\n",
    "        vios[scene] = eval(t.value,y.value,x_r.value, x_1.value,p1,p.value,test).item()\n",
    "        vios_1[scene] = eval(t.value,y.value,x_r.value, x_1.value,p1,p.value,train).item()\n",
    "        time[scene] = newprob.solver_stats.solve_time\n",
    "    return vios, vios_1, objs, time\n",
    "\n",
    "\n",
    "def sg(train, test):\n",
    "    vios = np.zeros((num_scenarios))\n",
    "    objs = np.zeros((num_scenarios))\n",
    "    time = np.zeros((num_scenarios))\n",
    "    for scene in range(num_scenarios):\n",
    "            # Formulate the Robust Problem\n",
    "        x_r = cp.Variable(n)\n",
    "        x_1 = cp.Variable(n)\n",
    "        t = cp.Variable()\n",
    "        y = cp.Variable()\n",
    "        p = cp.Parameter(n)\n",
    "        # p1 = cp.Parameter(n)\n",
    "        p.value = scenarios[scene][0]\n",
    "        # p1.value = scenarios[0][1]\n",
    "        objective = cp.Minimize(t+y)\n",
    "        constraints = [x_r >= 0, x_r >= x_1]\n",
    "        for u in train:\n",
    "          constraints += [cp.maximum(k@x_r - p@x_r - t, k@x_r - p@u - t,k1@x_1 - p1@x_1 - y,  k1@x_1 - p1@u - y) <= 0]\n",
    "          # constraints += [cp.maximum(k@x_r - p@x_r, k@x_r - p@u) <= t]\n",
    "          # constraints += [cp.maximum(k1@x_1 - p1@x_1, k1@x_1 - p1@u) <= y]\n",
    "        prob = lropt.RobustProblem(objective, constraints)\n",
    "        prob.solve()\n",
    "        objs[scene] = prob.objective.value\n",
    "        vios[scene] = eval(t.value,y.value,x_r.value, x_1.value,p1,p.value,test).item()\n",
    "        time[scene] = prob.solver_stats.solve_time\n",
    "    return vios, objs, time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "totalvios = np.zeros((num_scenarios*100,10))\n",
    "totalvios_train =  np.zeros((num_scenarios*100,10))\n",
    "totalobjs = np.zeros((num_scenarios*100,10))\n",
    "totaltime = np.zeros((num_scenarios*100,10))\n",
    "epsrange = np.linspace(0.1, 5, 10)\n",
    "for experiment in range(100):\n",
    "    print(experiment)\n",
    "    np.random.seed(experiment)\n",
    "    data = np.exp(np.random.multivariate_normal(mu,sig, N*2))\n",
    "    train, test = train_test_split(data, test_size=int(data.shape[0]*test_p), random_state=5)\n",
    "    ind = 0\n",
    "    for eps in epsrange:\n",
    "        vios, vios1, objs, time = mro(train,test, K = 300, rho = eps)\n",
    "        totalvios[(experiment*num_scenarios):((experiment+1)*num_scenarios),ind] = vios \n",
    "        totalvios_train[(experiment*num_scenarios):((experiment+1)*num_scenarios),ind] = vios1\n",
    "        totalobjs[(experiment*num_scenarios):((experiment+1)*num_scenarios),ind] = objs \n",
    "        totaltime[(experiment*num_scenarios):((experiment+1)*num_scenarios),ind] = time\n",
    "        ind += 1\n",
    "        np.save(\"totalvios2.npy\", totalvios)\n",
    "        np.save(\"totalvios_train2.npy\", totalvios_train)\n",
    "        np.save(\"totalobjs2.npy\", totalobjs)\n",
    "        np.save(\"totaltime2.npy\", totaltime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n",
      "75\n",
      "76\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "81\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n"
     ]
    }
   ],
   "source": [
    "sg_vals = np.zeros((num_scenarios*100,3))\n",
    "for experiment in range(100):\n",
    "    print(experiment)\n",
    "    np.random.seed(experiment)\n",
    "    data = np.exp(np.random.multivariate_normal(mu,sig, N*2))\n",
    "    train, test = train_test_split(data, test_size=int(data.shape[0]*test_p), random_state=5)\n",
    "    vios, objs, time = sg(train,test)\n",
    "    sg_vals[(experiment*num_scenarios):((experiment+1)*num_scenarios),0] = vios \n",
    "    sg_vals[(experiment*num_scenarios):((experiment+1)*num_scenarios),1] = objs \n",
    "    sg_vals[(experiment*num_scenarios):((experiment+1)*num_scenarios),2] = time\n",
    "    np.save(\"sg_vals1.npy\", sg_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  },
  "vscode": {
   "interpreter": {
    "hash": "30c3c09dd4e997e3a7859f8ad32d57c686543aa6231cf005f8af1a5d90496772"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
