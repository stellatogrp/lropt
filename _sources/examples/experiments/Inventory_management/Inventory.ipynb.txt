{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Learning Uncertainty Sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import cvxpy as cp\n",
    "import scipy as sc\n",
    "import numpy as np\n",
    "import numpy.random as npr\n",
    "import torch\n",
    "from sklearn import datasets\n",
    "import pandas as pd\n",
    "import lropt\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "import warnings\n",
    "import sys\n",
    "sys.path.append('..')\n",
    "from utils import plot_tradeoff,plot_iters\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "plt.rcParams.update({\n",
    "    \"text.usetex\":True,\n",
    "    \n",
    "    \"font.size\":18,\n",
    "    \"font.family\": \"serif\"\n",
    "})\n",
    "colors = [\"tab:blue\", \"tab:green\", \"tab:orange\", \n",
    "          \"blue\", \"tab:purple\", \"tab:brown\", \"tab:pink\", \"tab:grey\", \"red\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 3: Affine Adjustable Robust Optimization: Inventory management\n",
    "\n",
    "We solve the robust optimization problem given as \n",
    "\\begin{equation*}\n",
    "\t\\begin{array}{ll}\n",
    "\t\t\\text{minimize} & L\\\\\n",
    "\t\t\\text{subject to} & -r^Ty^0 - r^TYu + (t+h)^Ts \\le L, \\quad \\forall u\\in \\mathcal{U}(\\mathcal{D}_N,\\theta)\\\\\n",
    "\t\t& y^0_i + y_i^Tu\\leq s_i, \\quad i = 1, \\dots, N, \\quad \\forall u\\in \\mathcal{U}(\\mathcal{D}_N,\\theta)\\\\\n",
    "\t\t& y^0_i + y_i^Tu \\leq d_i^0 + q_i^Tu, \\quad i = 1, \\dots, N, \\quad \\forall u\\in \\mathcal{U}(\\mathcal{D}_N,\\theta)\\\\\n",
    "\t\t\t& \\mathbf{1}^Ts = C\\\\\n",
    "\t\t\t& s \\leq c\\\\\n",
    "\t\t\t& s \\geq 0.\n",
    "\t\\end{array}\n",
    "\\end{equation*}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_scaled(N, m, scale, seed):\n",
    "    np.random.seed(seed)\n",
    "    R = np.vstack([np.random.normal(\n",
    "        i*0.03*scale, np.sqrt((0.02**2+(i*0.1)**2)), N) for i in range(1, m+1)])\n",
    "    return (R.transpose())\n",
    "\n",
    "def data_modes(N, m, scales, seed):\n",
    "    modes = len(scales)\n",
    "    d = np.zeros((N+100, m))\n",
    "    weights = int(np.ceil(N/modes))\n",
    "    for i in range(modes):\n",
    "        d[i*weights:(i+1)*weights,\n",
    "          :] = data_scaled(weights, m, scales[i], seed)\n",
    "    return d[0:N, :]\n",
    "\n",
    "def loss(L,y,Y,s,r,alpha, data,mu=1000,l=10000,quantile = 0.95, target = -0.1):\n",
    "    sums = 0\n",
    "    totsum = 0\n",
    "    Nsample = data.shape[0]\n",
    "    for i in range(Nsample):\n",
    "        sums += torch.sum(torch.maximum(y + Y@data[i] - s-alpha, torch.tensor(0.,requires_grad = True)))\n",
    "        sums += torch.sum(torch.maximum(y + Y@data[i] - torch.tensor(d) - torch.tensor(Q)@data[i] - alpha, torch.tensor(0.,requires_grad = True)))\n",
    "        sums += torch.maximum(-r@y - r@Y@data[i] + torch.tensor(t+ h)@s - L - alpha, torch.tensor(0.,requires_grad = True))\n",
    "\n",
    "        newsums = torch.sum(torch.where(torch.maximum(y + Y@data[i] - s, torch.tensor(0.,requires_grad = True))>=0.001,torch.tensor(1.), torch.tensor(0.)))\n",
    "        newsums += torch.sum(torch.where(torch.maximum(y + Y@data[i] - torch.tensor(d) - torch.tensor(Q)@data[i], torch.tensor(0.,requires_grad = True))>=0.001,torch.tensor(1.), torch.tensor(0.)))\n",
    "        newsums += torch.where(torch.maximum(-r@y - r@Y@data[i] + torch.tensor(t+ h)@s - L, torch.tensor(0.,requires_grad = True))>=0.01, torch.tensor(1.), torch.tensor(0.))\n",
    "        totsum += newsums/(2*10+1)\n",
    "    sums = (sums/((1-quantile)*(2*10+1)*Nsample)) + alpha\n",
    "    return L + torch.tensor(l)*(sums - torch.tensor(target)) + torch.tensor(mu/2)*(sums - torch.tensor(target))**2, L, totsum/Nsample, sums.detach().numpy()\n",
    "\n",
    "def loss(L,y,Y,s,r,alpha, data,mu=1000,l=10000,quantile = 0.95, target = -0.1):\n",
    "    sums = 0\n",
    "    totsum = torch.tensor(0.)\n",
    "    Nsample = data.shape[0]\n",
    "    for i in range(Nsample):\n",
    "        sums += torch.maximum(torch.max(torch.maximum(torch.maximum(y + Y@data[i] - s-alpha, torch.tensor(0.,requires_grad = True)),y + Y@data[i] - torch.tensor(d) - torch.tensor(Q)@data[i] - alpha)),torch.maximum(-r@y - r@Y@data[i] + torch.tensor(t+ h)@s - L - alpha, torch.tensor(0.,requires_grad = True)))\n",
    "\n",
    "        newsums = torch.sum(torch.where(torch.maximum(y + Y@data[i] - s, torch.tensor(0.,requires_grad = True))>=0.0001,torch.tensor(1.), torch.tensor(0.)))\n",
    "        newsums += torch.sum(torch.where(torch.maximum(y + Y@data[i] - torch.tensor(d) - torch.tensor(Q)@data[i], torch.tensor(0.,requires_grad = True))>=0.0001,torch.tensor(1.), torch.tensor(0.)))\n",
    "        newsums += torch.where(torch.maximum(-r@y - r@Y@data[i] + torch.tensor(t+ h)@s - L, torch.tensor(0.,requires_grad = True))>=0.0001, torch.tensor(1.), torch.tensor(0.))\n",
    "        if newsums >=1:\n",
    "            totsum += torch.tensor(1.)\n",
    "    sums = (sums/((1-quantile)*Nsample)) + alpha\n",
    "    return L + torch.tensor(l)*(sums - torch.tensor(target)) + torch.tensor(mu/2)*(sums - torch.tensor(target))**2, L, totsum/Nsample, sums.detach().numpy()\n",
    "\n",
    "\n",
    "def loss(L,y,Y,s,r,alpha, data,mu=1000,l=10000,quantile = 0.95, target = -0.1):\n",
    "    sums = 0\n",
    "    totsum = torch.tensor(0.)\n",
    "    Nsample = data.shape[0]\n",
    "    for i in range(Nsample):\n",
    "        sums += torch.sum(torch.maximum(y + Y@data[i] - s-alpha, torch.tensor(0.,requires_grad = True)))\n",
    "        sums += torch.sum(torch.maximum(y + Y@data[i] - torch.tensor(d) - torch.tensor(Q)@data[i] - alpha, torch.tensor(0.,requires_grad = True)))\n",
    "        sums += torch.maximum(-r@y - r@Y@data[i] + torch.tensor(t+ h)@s - L - alpha, torch.tensor(0.,requires_grad = True))\n",
    "\n",
    "        newsums = torch.sum(torch.where(torch.maximum(y + Y@data[i] - s, torch.tensor(0.,requires_grad = True))>=0.0001,torch.tensor(1.), torch.tensor(0.)))\n",
    "        newsums += torch.sum(torch.where(torch.maximum(y + Y@data[i] - torch.tensor(d) - torch.tensor(Q)@data[i], torch.tensor(0.,requires_grad = True))>=0.0001,torch.tensor(1.), torch.tensor(0.)))\n",
    "        newsums += torch.where(torch.maximum(-r@y - r@Y@data[i] + torch.tensor(t+ h)@s - L, torch.tensor(0.,requires_grad = True))>=0.0001, torch.tensor(1.), torch.tensor(0.))\n",
    "        if newsums >=1:\n",
    "            totsum += torch.tensor(1.)\n",
    "    sums = (sums/((1-quantile)*Nsample)) + alpha\n",
    "    return L + torch.tensor(l)*(sums - torch.tensor(target)) + torch.tensor(mu/2)*(sums - torch.tensor(target))**2, L, totsum/Nsample, sums.detach().numpy()\n",
    "\n",
    "\n",
    "n = 10\n",
    "m = 4\n",
    "\n",
    "r = np.random.uniform(20,40,n)\n",
    "scenarios = {}\n",
    "num_scenarios = 5\n",
    "for scene in range(num_scenarios):\n",
    "    np.random.seed(scene)\n",
    "    scenarios[scene] = {}\n",
    "    scenarios[scene][0] = r + np.random.normal(0,0.1,n)\n",
    "\n",
    "np.random.seed(27)\n",
    "C = 2000\n",
    "c = np.random.uniform(300,500,n)\n",
    "Q = np.random.uniform(-2,2,(n,m))\n",
    "d = np.random.uniform(100,200,n)\n",
    "t = np.random.uniform(1,3,n)\n",
    "h = np.random.uniform(1,3,n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "saved_s = np.load(\"scenarios.npy\")\n",
    "num_scenarios = 5\n",
    "for scene in range(num_scenarios):\n",
    "    scenarios[scene] = {}\n",
    "    scenarios[scene][0] = saved_s[scene]\n",
    "\n",
    "seed = 27\n",
    "n = 10\n",
    "m = 4\n",
    "data = data_modes(600,m,[10,20,30],seed = seed)\n",
    "# formulate the ellipsoidal set\n",
    "u = lropt.UncertainParameter(m,\n",
    "                                uncertainty_set = lropt.Ellipsoidal(p=2, \n",
    "                                                                  rho=1., data =data, loss =loss))\n",
    "# formulate cvxpy variable\n",
    "L = cp.Variable()\n",
    "s = cp.Variable(n)\n",
    "y = cp.Variable(n)\n",
    "Y = cp.Variable((n,m))\n",
    "r = cp.Parameter(n)\n",
    "\n",
    "# formulate problem constants\n",
    "np.random.seed(27)\n",
    "C = 2000\n",
    "c = np.random.uniform(300,500,n)\n",
    "Q = np.random.uniform(-2,2,(n,m))\n",
    "d = np.random.uniform(100,200,n)\n",
    "t = np.random.uniform(1,3,n)\n",
    "h = np.random.uniform(1,3,n)\n",
    "\n",
    "# formulate objective\n",
    "objective = cp.Minimize(L)\n",
    "\n",
    "# formulate constraints\n",
    "# constraints = [cp.maximum(-r@y - r@Y@u + (t+h)@s - L, y[0]+Y[0]@u -s[0],y[1]+Y[1]@u -s[1],y[2]+Y[2]@u -s[2],y[3]+Y[3]@u -s[3],y[4]+Y[4]@u -s[4],y[5]+Y[5]@u -s[5],y[6]+Y[6]@u -s[6],y[7]+Y[7]@u -s[7], y[8]+Y[8]@u -s[8],y[9]+Y[9]@u -s[9],y[0] - d[0] - (Q[0] - Y[0])@u,y[1] - d[1] - (Q[1] - Y[1])@u,y[2] - d[2] - (Q[2] - Y[2])@u ,y[3] - d[3] - (Q[3] - Y[3])@u,y[4] - d[4] - (Q[4] - Y[4])@u,y[5] - d[5] - (Q[5] - Y[5])@u,y[6] - d[6] - (Q[6] - Y[6])@u,y[7] - d[7] - (Q[7] - Y[7])@u,y[8] - d[8] - (Q[8] - Y[8])@u,y[9] - d[9] - (Q[9] - Y[9])@u ) <= 0]\n",
    "constraints = [-r@y - r@Y@u + (t+h)@s <= L]\n",
    "for i in range(n):\n",
    "    constraints += [y[i]+Y[i]@u <= s[i]]\n",
    "    constraints += [y[i]<= d[i]+ (Q[i] - Y[i])@u]\n",
    "constraints += [np.ones(n)@s == C]\n",
    "constraints += [s <=c, s >=0]\n",
    "\n",
    "# formulate Robust Problem\n",
    "prob = lropt.RobustProblem(objective, constraints)\n",
    "target = -0.05\n",
    "# solve\n",
    "test_p = 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "seed = 27\n",
    "n = 10\n",
    "m = 4\n",
    "data = data_modes(600,m,[10,20,30],seed = seed)\n",
    "# formulate the ellipsoidal set\n",
    "u = lropt.UncertainParameter(m,\n",
    "                                uncertainty_set = lropt.Ellipsoidal(p=2, \n",
    "                                                                  rho=1., data =data, loss =loss))\n",
    "# formulate cvxpy variable\n",
    "L = cp.Variable()\n",
    "s = cp.Variable(n)\n",
    "y = cp.Variable(n)\n",
    "Y = cp.Variable((n,m))\n",
    "r = cp.Parameter(n)\n",
    "\n",
    "# formulate problem constants\n",
    "np.random.seed(27)\n",
    "C = 2000\n",
    "c = np.random.uniform(300,500,n)\n",
    "Q = np.random.uniform(-2,2,(n,m))\n",
    "d = np.random.uniform(100,200,n)\n",
    "t = np.random.uniform(1,3,n)\n",
    "h = np.random.uniform(1,3,n)\n",
    "\n",
    "# formulate objective\n",
    "objective = cp.Minimize(L)\n",
    "\n",
    "# formulate constraints\n",
    "# constraints = [cp.maximum(-r@y - r@Y@u + (t+h)@s - L, y[0]+Y[0]@u -s[0],y[1]+Y[1]@u -s[1],y[2]+Y[2]@u -s[2],y[3]+Y[3]@u -s[3],y[4]+Y[4]@u -s[4],y[5]+Y[5]@u -s[5],y[6]+Y[6]@u -s[6],y[7]+Y[7]@u -s[7], y[8]+Y[8]@u -s[8],y[9]+Y[9]@u -s[9],y[0] - d[0] - (Q[0] - Y[0])@u,y[1] - d[1] - (Q[1] - Y[1])@u,y[2] - d[2] - (Q[2] - Y[2])@u ,y[3] - d[3] - (Q[3] - Y[3])@u,y[4] - d[4] - (Q[4] - Y[4])@u,y[5] - d[5] - (Q[5] - Y[5])@u,y[6] - d[6] - (Q[6] - Y[6])@u,y[7] - d[7] - (Q[7] - Y[7])@u,y[8] - d[8] - (Q[8] - Y[8])@u,y[9] - d[9] - (Q[9] - Y[9])@u ) <= 0]\n",
    "constraints = [-r@y - r@Y@u + (t+h)@s <= L]\n",
    "for i in range(n):\n",
    "    constraints += [y[i]+Y[i]@u <= s[i]]\n",
    "    constraints += [y[i]<= d[i]+ (Q[i] - Y[i])@u]\n",
    "constraints += [np.ones(n)@s == C]\n",
    "constraints += [s <=c, s >=0]\n",
    "\n",
    "# formulate Robust Problem\n",
    "prob = lropt.RobustProblem(objective, constraints)\n",
    "target = -0.05\n",
    "# solve\n",
    "test_p = 0.5\n",
    "train, test = train_test_split(data, test_size=int(data.shape[0]*test_p), random_state=seed)\n",
    "init = sc.linalg.sqrtm(sc.linalg.inv(np.cov(train.T)))\n",
    "init_bval = -init@np.mean(train, axis=0)\n",
    "result1 = prob.train(lr = 0.000001, step=500, momentum = 0.8, optimizer = \"SGD\", seed = seed, init_A = 0.3*init, init_b = 0.3*init_bval, fixb = False, init_lam = 0, init_mu=1, target_cvar = target, init_alpha = -0.05, mu_multiplier = 1.013, test_percentage = test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "df1 = result1.df\n",
    "A_fin = result1.A\n",
    "b_fin = result1.b\n",
    "\n",
    "result3 = prob.train(eps = True, lr = 0.00001, step=500, momentum = 0.8, optimizer = \"SGD\", seed = seed, init_A = 0.3*init, init_b =0.3*init_bval,  init_lam = 0, init_mu=1,target_cvar = target, init_alpha = -0.05, mu_multiplier = 1.013, test_percentage = test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "df_r2 = result3.df\n",
    "\n",
    "# Grid search epsilon\n",
    "result4 = prob.grid(epslst = np.linspace(0.01, 1.5, 40), init_A = 0.3*init, init_b = 0.3*init_bval, seed = seed, init_alpha = 0., test_percentage =test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "dfgrid = result4.df\n",
    "\n",
    "result5 = prob.grid(epslst = np.linspace(0.01,1.5, 40), init_A = A_fin, init_b = b_fin, seed = seed, init_alpha = 0., test_percentage = test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "dfgrid2 = result5.df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_tradeoff(dfgrid,dfgrid2,\"inventory\",ind_1 = (17,100), ind_2 = (26,100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_iters(df1,\"inventory_log\", logscale = True, steps = 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def eval(L,y,Y,s,r,data):\n",
    "    L = torch.tensor(L)\n",
    "    y = torch.tensor(y)\n",
    "    Y = torch.tensor(Y)\n",
    "    s = torch.tensor(s)\n",
    "    r = torch.tensor(r)\n",
    "    data = torch.tensor(data)\n",
    "    totsum = torch.tensor(0.)\n",
    "    Nsample = data.shape[0]\n",
    "    for i in range(Nsample):\n",
    "        newsums = torch.sum(torch.where(torch.maximum(y + Y@data[i] - s, torch.tensor(0.,requires_grad = True))>=0.0001,torch.tensor(1.), torch.tensor(0.)))\n",
    "        newsums += torch.sum(torch.where(torch.maximum(y + Y@data[i] - torch.tensor(d) - torch.tensor(Q)@data[i], torch.tensor(0.,requires_grad = True))>=0.0001,torch.tensor(1.), torch.tensor(0.)))\n",
    "        newsums += torch.where(torch.maximum(-r@y - r@Y@data[i] + torch.tensor(t+ h)@s - L, torch.tensor(0.,requires_grad = True))>=0.0001, torch.tensor(1.), torch.tensor(0.))\n",
    "        if newsums >=1:\n",
    "            totsum += torch.tensor(1.)\n",
    "    return totsum/Nsample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_table(result_A, result_b, df,test,train,value = 0., eps = 1, cvar_train = 0, cvar_test=0):\n",
    "    trial1 = np.zeros((num_scenarios,6))\n",
    "    for scene in range(num_scenarios):\n",
    "        # formulate the ellipsoidal set\n",
    "        if eps:\n",
    "            r_eps = 1\n",
    "        else:\n",
    "            r_eps = df['Eps'][np.absolute(np.mean(np.vstack(df['Violations_train']),axis = 1)-value).argmin()]\n",
    "        u = lropt.UncertainParameter(m,\n",
    "                                        uncertainty_set = lropt.Ellipsoidal(p=2, \n",
    "                                                                        rho=1., A = (1/r_eps)*result_A, b=(1/r_eps)*result_b))\n",
    "        # formulate cvxpy variable\n",
    "        L = cp.Variable()\n",
    "        s = cp.Variable(n)\n",
    "        y = cp.Variable(n)\n",
    "        Y = cp.Variable((n,m))\n",
    "        r = cp.Parameter(n)\n",
    "        r.value = scenarios[scene][0]\n",
    "\n",
    "        # formulate objective\n",
    "        objective = cp.Minimize(L)\n",
    "\n",
    "        # formulate constraints\n",
    "        # constraints = [cp.maximum(-r@y - r@Y@u + (t+h)@s - L, y[0]+Y[0]@u -s[0],y[1]+Y[1]@u -s[1],y[2]+Y[2]@u -s[2],y[3]+Y[3]@u -s[3],y[4]+Y[4]@u -s[4],y[5]+Y[5]@u -s[5],y[6]+Y[6]@u -s[6],y[7]+Y[7]@u -s[7], y[8]+Y[8]@u -s[8],y[9]+Y[9]@u -s[9],y[0] - d[0] - (Q[0] - Y[0])@u,y[1] - d[1] - (Q[1] - Y[1])@u,y[2] - d[2] - (Q[2] - Y[2])@u ,y[3] - d[3] - (Q[3] - Y[3])@u,y[4] - d[4] - (Q[4] - Y[4])@u,y[5] - d[5] - (Q[5] - Y[5])@u,y[6] - d[6] - (Q[6] - Y[6])@u,y[7] - d[7] - (Q[7] - Y[7])@u,y[8] - d[8] - (Q[8] - Y[8])@u,y[9] - d[9] - (Q[9] - Y[9])@u ) <= 0]\n",
    "        constraints = [-r@y - r@Y@u + (t+h)@s <= L]\n",
    "        for i in range(n):\n",
    "            constraints += [y[i]+Y[i]@u <= s[i]]\n",
    "            constraints += [y[i]<= d[i]+ (Q[i] - Y[i])@u]\n",
    "        constraints += [np.ones(n)@s == C]\n",
    "        constraints += [s <=c, s >=0]\n",
    "\n",
    "        # formulate Robust Problem\n",
    "        prob = lropt.RobustProblem(objective, constraints)\n",
    "        newprob = prob.dualize_constraints()\n",
    "        newprob.solve()\n",
    "        trial1[scene,0] = newprob.objective.value\n",
    "        trial1[scene,1] = eval(L.value,y.value,Y.value,s.value,r.value,test).item()\n",
    "        trial1[scene,2] = eval(L.value,y.value,Y.value,s.value,r.value,train).item()\n",
    "        trial1[scene,3] = cvar_train\n",
    "        trial1[scene,4] = cvar_test\n",
    "        trial1[scene,5] = newprob.solver_stats.solve_time\n",
    "    return trial1\n",
    "\n",
    "def sg(train, test):\n",
    "    vios = np.zeros((num_scenarios))\n",
    "    objs = np.zeros((num_scenarios))\n",
    "    time = np.zeros((num_scenarios))\n",
    "    for scene in range(num_scenarios):\n",
    "        # formulate cvxpy variable\n",
    "        L = cp.Variable()\n",
    "        s = cp.Variable(n)\n",
    "        y = cp.Variable(n)\n",
    "        Y = cp.Variable((n,m))\n",
    "        r = cp.Parameter(n)\n",
    "        r.value = scenarios[scene][0]\n",
    "\n",
    "        # formulate objective\n",
    "        objective = cp.Minimize(L)\n",
    "        constraints = []\n",
    "        # formulate constraints\n",
    "        for u in train:\n",
    "            constraints += [-r@y - r@Y@u + (t+h)@s <= L]\n",
    "            for i in range(n):\n",
    "                constraints += [y[i]+Y[i]@u <= s[i]]\n",
    "                constraints += [y[i]<= d[i]+ (Q[i] - Y[i])@u]\n",
    "        constraints += [np.ones(n)@s == C]\n",
    "        constraints += [np.ones(n)@s == C]\n",
    "        constraints += [s <=c, s >=0]\n",
    "\n",
    "        # formulate Robust Problem\n",
    "        prob = cp.Problem(objective, constraints)\n",
    "        prob.solve()\n",
    "        objs[scene] = prob.objective.value\n",
    "        vios[scene] = eval(L.value,y.value,Y.value,s.value,r.value,test).item()\n",
    "        time[scene] = prob.solver_stats.solve_time\n",
    "    return vios, objs, time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n"
     ]
    }
   ],
   "source": [
    "# Ar_saved = np.zeros((100,m,m))\n",
    "# br_saved = np.zeros((100,m))\n",
    "# As_saved = np.zeros((100,m,m))\n",
    "# bs_saved = np.zeros((100,m))\n",
    "# reshaped_table = np.zeros((1,18))\n",
    "# standard_table = np.zeros((1,18))\n",
    "for experiment in range(60,75):\n",
    "    print(experiment)\n",
    "    data = data_modes(600,m,[10,20,30],seed = experiment)\n",
    "    # formulate the ellipsoidal set\n",
    "    u = lropt.UncertainParameter(m,\n",
    "                                    uncertainty_set = lropt.Ellipsoidal(p=2, \n",
    "                                                                    rho=1., data =data, loss =loss))\n",
    "    # formulate cvxpy variable\n",
    "    L = cp.Variable()\n",
    "    s = cp.Variable(n)\n",
    "    y = cp.Variable(n)\n",
    "    Y = cp.Variable((n,m))\n",
    "    r = cp.Parameter(n)\n",
    "    r.value = scenarios[scene][0]\n",
    "\n",
    "    # formulate objective\n",
    "    objective = cp.Minimize(L)\n",
    "\n",
    "    # formulate constraints\n",
    "    # constraints = [cp.maximum(-r@y - r@Y@u + (t+h)@s - L, y[0]+Y[0]@u -s[0],y[1]+Y[1]@u -s[1],y[2]+Y[2]@u -s[2],y[3]+Y[3]@u -s[3],y[4]+Y[4]@u -s[4],y[5]+Y[5]@u -s[5],y[6]+Y[6]@u -s[6],y[7]+Y[7]@u -s[7], y[8]+Y[8]@u -s[8],y[9]+Y[9]@u -s[9],y[0] - d[0] - (Q[0] - Y[0])@u,y[1] - d[1] - (Q[1] - Y[1])@u,y[2] - d[2] - (Q[2] - Y[2])@u ,y[3] - d[3] - (Q[3] - Y[3])@u,y[4] - d[4] - (Q[4] - Y[4])@u,y[5] - d[5] - (Q[5] - Y[5])@u,y[6] - d[6] - (Q[6] - Y[6])@u,y[7] - d[7] - (Q[7] - Y[7])@u,y[8] - d[8] - (Q[8] - Y[8])@u,y[9] - d[9] - (Q[9] - Y[9])@u ) <= 0]\n",
    "    constraints = [-r@y - r@Y@u + (t+h)@s <= L]\n",
    "    for i in range(n):\n",
    "        constraints += [y[i]+Y[i]@u <= s[i]]\n",
    "        constraints += [y[i]<= d[i]+ (Q[i] - Y[i])@u]\n",
    "    constraints += [np.ones(n)@s == C]\n",
    "    constraints += [s <=c, s >=0]\n",
    "\n",
    "    # formulate Robust Problem\n",
    "    prob = lropt.RobustProblem(objective, constraints)\n",
    "    target = -0.015\n",
    "    # solve\n",
    "    test_p = 0.5\n",
    "    seed = 27\n",
    "    train, test = train_test_split(data, test_size=int(data.shape[0]*test_p), random_state=seed)\n",
    "    init = sc.linalg.sqrtm(sc.linalg.inv(np.cov(train.T)))\n",
    "    init_bval = -init@np.mean(train, axis=0)\n",
    "    result1 = prob.train(lr = 0.000001, step=500, momentum = 0.8, optimizer = \"SGD\", seed = seed, init_A = 0.3*init, init_b = 0.3*init_bval, fixb = False, init_lam = 0, init_mu=1, target_cvar = target, init_alpha = -0.05, mu_multiplier = 1.013, test_percentage = test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "    df1 = result1.df\n",
    "    A_fin = result1.A\n",
    "    b_fin = result1.b\n",
    "    Ar_saved[experiment,:] = A_fin\n",
    "    br_saved[experiment,:] = b_fin\n",
    "\n",
    "    result3 = prob.train(eps = True, lr = 0.000001, step=500, momentum = 0.8, optimizer = \"SGD\", seed = seed, init_A = 0.3*init, init_b =0.3*init_bval,  init_lam = 0, init_mu=1,target_cvar = target, init_alpha = -0.05, mu_multiplier = 1.013, test_percentage = test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "    df_r2 = result3.df\n",
    "    As_saved[experiment,:] = result3.A\n",
    "    bs_saved[experiment,:] = result3.b\n",
    "\n",
    "    result4 = prob.grid(epslst = np.linspace(0.9, 1.6, 80), init_A = result3.A, init_b = result3.b, seed = seed, init_alpha = 0., test_percentage =test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "    dfgrid = result4.df\n",
    "\n",
    "    result5 = prob.grid(epslst = np.linspace(0.5,1.2, 80), init_A = A_fin, init_b = b_fin, seed = seed, init_alpha = 0., test_percentage = test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "    dfgrid2 = result5.df\n",
    "\n",
    "    r_t = make_table(A_fin, b_fin, dfgrid2,test,train,0.045, eps = 0, cvar_train = df1[\"Violation_train\"].values[-1], cvar_test = df1[\"Violation_val\"].values[-1])\n",
    "    r_t1 = make_table(A_fin, b_fin, dfgrid2,test,train,0., eps = 1,cvar_train = df1[\"Violation_train\"].values[-1], cvar_test = df1[\"Violation_val\"].values[-1])\n",
    "    r_t2 = make_table(A_fin, b_fin, dfgrid2,test,train,0.03, eps = 0, cvar_train = df1[\"Violation_train\"].values[-1], cvar_test = df1[\"Violation_val\"].values[-1])\n",
    "    r_t = np.hstack((r_t, r_t1,r_t2))\n",
    "    reshaped_table = np.vstack((reshaped_table, r_t))\n",
    "\n",
    "    s_t = make_table(result3.A, result3.b, dfgrid,test,train, 0.045, eps = 0,cvar_train = df_r2[\"Violation_train\"].values[-1], cvar_test = df_r2[\"Violation_val\"].values[-1])\n",
    "    s_t1 = make_table(result3.A, result3.b, dfgrid,test,train, 0., eps = 1,cvar_train = df_r2[\"Violation_train\"].values[-1], cvar_test = df_r2[\"Violation_val\"].values[-1])\n",
    "    s_t2 = make_table(result3.A, result3.b, dfgrid,test,train, 0.03, eps = 0,cvar_train = df_r2[\"Violation_train\"].values[-1], cvar_test = df_r2[\"Violation_val\"].values[-1])\n",
    "    s_t = np.hstack((s_t, s_t1,s_t2))\n",
    "    standard_table = np.vstack((standard_table, s_t))\n",
    "    pd.DataFrame(standard_table).to_csv(\"standard_table_2.csv\")\n",
    "    pd.DataFrame(reshaped_table).to_csv(\"reshaped_table_2.csv\")\n",
    "    np.save(\"Ar_saved.npy\", Ar_saved)\n",
    "    np.save(\"As_saved.npy\", As_saved)\n",
    "    np.save(\"br_saved.npy\", br_saved)\n",
    "    np.save(\"bs_saved.npy\", bs_saved)\n",
    "# reshaped_table = reshaped_table[1:]\n",
    "# standard_table = standard_table[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_vio_target 0.03:  0.03162962966805527 \n",
      "train_vio_target 0.03:  0.029622222031984016 \n",
      "test_obj_target 0.03:  -44845.60578876405 \n",
      "test_vio_target 0.05:  0.048133333474397605 \n",
      "train_vio_target 0.05:  0.04591851859456959 \n",
      "test_obj_target 0.05:  -44870.02151226372 \n",
      "test_vio:  0.007296296400535403 \n",
      "train_vio:  0.005629629713172669 \n",
      "test_obj:  -44769.57040472041 \n",
      "test_cvar:  0.10373648183338893 \n",
      "train_cvar:  0.019517236398798026\n"
     ]
    }
   ],
   "source": [
    "print(\"test_vio_target 0.03: \", np.mean(np.mean(reshaped_table[:,13].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio_target 0.03: \", np.mean(np.mean(reshaped_table[:,14].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj_target 0.03: \", np.mean(np.mean(reshaped_table[:,12].reshape(-1, 5), axis=1)),\"\\n\"\"test_vio_target 0.05: \", np.mean(np.mean(reshaped_table[:,1].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio_target 0.05: \", np.mean(np.mean(reshaped_table[:,2].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj_target 0.05: \", np.mean(np.mean(reshaped_table[:,0].reshape(-1, 5), axis=1)),\"\\n\"\"test_vio: \", np.mean(np.mean(reshaped_table[:,7].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio: \", np.mean(np.mean(reshaped_table[:,8].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj: \", np.mean(np.mean(reshaped_table[:,6].reshape(-1, 5), axis=1)),\"\\n\"\"test_cvar: \", np.mean(np.mean(reshaped_table[:,4].reshape(-1, 5), axis=1)),\"\\n\"\"train_cvar: \",np.mean(np.mean(reshaped_table[:,3].reshape(-1, 5), axis=1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_vio_target 0.03:  0.03505185188932547 \n",
      "train_vio_target 0.03:  0.03313333316809597 \n",
      "test_obj_target 0.03:  -44711.371244385075 \n",
      "test_vio_target 0.05:  0.0469925927660531 \n",
      "train_vio_target 0.05:  0.046585185196664575 \n",
      "test_obj_target 0.05:  -44740.23591235166 \n",
      "test_vio:  0.044281481578946076 \n",
      "train_vio:  0.04250370413685835 \n",
      "test_obj:  -44716.99378733961 \n",
      "test_cvar:  0.7664860158662089 \n",
      "train_cvar:  0.7649358521596391\n"
     ]
    }
   ],
   "source": [
    "print(\"test_vio_target 0.03: \", np.mean(np.mean(standard_table[:,13].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio_target 0.03: \", np.mean(np.mean(standard_table[:,14].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj_target 0.03: \", np.mean(np.mean(standard_table[:,12].reshape(-1, 5), axis=1)),\"\\n\"\"test_vio_target 0.05: \", np.mean(np.mean(standard_table[:,1].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio_target 0.05: \", np.mean(np.mean(standard_table[:,2].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj_target 0.05: \", np.mean(np.mean(standard_table[:,0].reshape(-1, 5), axis=1)),\"\\n\"\"test_vio: \", np.mean(np.mean(standard_table[:,7].reshape(-1, 5), axis=1)),\"\\n\"\"train_vio: \", np.mean(np.mean(standard_table[:,8].reshape(-1, 5), axis=1)),\"\\n\"\"test_obj: \", np.mean(np.mean(standard_table[:,6].reshape(-1, 5), axis=1)),\"\\n\"\"test_cvar: \", np.mean(np.mean(standard_table[:,4].reshape(-1, 5), axis=1)),\"\\n\"\"train_cvar: \",np.mean(np.mean(standard_table[:,3].reshape(-1, 5), axis=1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,4))\n",
    "plt.scatter(standard_table[:,1], standard_table[:,0],label = \"Standard set\", color = \"tab:blue\")\n",
    "plt.scatter(reshaped_table[:,1], reshaped_table[:,0],label = \"Reshaped set\", color = \"tab:orange\")\n",
    "plt.scatter(sg_vals1[:,0], sg_vals1[:,1],label = \"SG\", color = \"tab:purple\")\n",
    "plt.scatter(totalvios[:,1] ,totalobjs[:,1], color = \"tab:green\", label = \" Wass DRO\")\n",
    "plt.xlabel(\"Empirical probability of constraint violation\")\n",
    "plt.ylabel(\"Out-of-sample objective\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DRO =  0.028860000107437372 -44654.18241644456 0.41673677725399977\n",
      "SG =  0.04773333342373371 -44779.76815286121 0.08568870542000001\n",
      "0.18888888888888888\n",
      "0.1111111111111111\n",
      "0.434\n",
      "0.02\n"
     ]
    }
   ],
   "source": [
    "print(\"DRO = \", np.mean(totalvios, axis = 0)[2] , np.mean(totalobjs,axis = 0)[2], np.mean(totaltime, axis = 0)[2])\n",
    "print(\"SG = \", np.mean(sg_vals1[:,0]), np.mean(sg_vals1[:,1]),np.mean(sg_vals1[:,2]))\n",
    "print(np.mean(np.mean(standard_table[:,13].reshape(-1, 5), axis=1) >= 0.05))\n",
    "print(np.mean(np.mean(reshaped_table[:,13].reshape(-1, 5), axis=1) >= 0.05))\n",
    "print(np.mean(sg_vals1[:,0] >= 0.05))\n",
    "print(np.mean(totalvios[:,2] >= 0.05))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,4))\n",
    "plt.scatter(np.mean(totalvios, axis = 0)[1] , np.mean(totalobjs,axis = 0)[1], color = \"tab:green\", label = \" Wass DRO\")\n",
    "plt.scatter(np.mean(standard_table[:,1]), np.mean(standard_table[:,0]),label = \"Standard set\", color = \"tab:blue\")\n",
    "plt.scatter(np.mean(reshaped_table[:,1]), np.mean(reshaped_table[:,0]),label = \"Reshaped set\", color = \"tab:orange\")\n",
    "# plt.scatter(np.mean(sg_vals[:,0]), np.mean(sg_vals[:,1]), label = \"SG\", color = \"tab:purple\")\n",
    "plt.xlabel(\"Empirical probability of constraint violation\")\n",
    "plt.ylabel(\"Out-of-sample objective\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "0.4111111111111111\n",
      "0.0\n"
     ]
    }
   ],
   "source": [
    "print(np.mean(standard_table[:,4] >= 0.05))\n",
    "print(np.mean(reshaped_table[:,4] >= 0.05))\n",
    "# print(np.mean(sg_vals[:,0] >= 0.05))\n",
    "print(np.mean(totalvios[:,3] >= 0.05))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mro(train,test, K = 300, rho = 1, num_scenarios = num_scenarios, scenarios = scenarios):\n",
    "    vios = np.zeros((num_scenarios))\n",
    "    vios1 = np.zeros((num_scenarios))\n",
    "    objs = np.zeros((num_scenarios))\n",
    "    time = np.zeros((num_scenarios))\n",
    "    for scene in range(num_scenarios):\n",
    "        u = lropt.UncertainParameter(m,\n",
    "                                        uncertainty_set = lropt.MRO(train = False, data = train, rho = rho, A = None, K = K))\n",
    "        # formulate cvxpy variable\n",
    "        L = cp.Variable()\n",
    "        s = cp.Variable(n)\n",
    "        y = cp.Variable(n)\n",
    "        Y = cp.Variable((n,m))\n",
    "        r = cp.Parameter(n)\n",
    "        r.value = scenarios[scene][0]\n",
    "\n",
    "        # formulate objective\n",
    "        objective = cp.Minimize(L)\n",
    "\n",
    "        # formulate constraints\n",
    "        constraints = [-r@y - r@Y@u + (t+h)@s <= L]\n",
    "        for i in range(n):\n",
    "            constraints += [y[i]+Y[i]@u <= s[i]]\n",
    "            constraints += [y[i]<= d[i]+ (Q[i] - Y[i])@u]\n",
    "        constraints += [np.ones(n)@s == C]\n",
    "        constraints += [s <=c, s >=0]\n",
    "\n",
    "        # formulate Robust Problem\n",
    "        prob = lropt.RobustProblem(objective, constraints)\n",
    "        newprob = prob.dualize_constraints()\n",
    "        newprob.solve()\n",
    "        objs[scene] = newprob.objective.value\n",
    "        vios[scene] = eval(L.value,y.value,Y.value,s.value,r.value,test).item()\n",
    "        vios1[scene] = eval(L.value,y.value,Y.value,s.value,r.value,train).item()\n",
    "        time[scene] = newprob.solver_stats.solve_time\n",
    "    return vios, vios1, objs, time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "totalvios = np.zeros((num_scenarios*100,5))\n",
    "totalvios_train = np.zeros((num_scenarios*100,5))\n",
    "totalobjs = np.zeros((num_scenarios*100,5))\n",
    "totaltime = np.zeros((num_scenarios*100,5))\n",
    "epsrange = np.linspace(1.5, 2.5, 5)\n",
    "for experiment in range(100):\n",
    "    print(experiment)\n",
    "    data = data_modes(600,m,[10,20,30],seed = experiment)\n",
    "    train, test = train_test_split(data, test_size=int(data.shape[0]*test_p), random_state=27)\n",
    "    ind = 0\n",
    "    for eps in epsrange:\n",
    "        vios, vios1, objs, time = mro(train,test, K = 300, rho = eps)\n",
    "        totalvios[(experiment*num_scenarios):((experiment+1)*num_scenarios),ind] = vios\n",
    "        print(experiment, objs)\n",
    "        totalvios_train[(experiment*num_scenarios):((experiment+1)*num_scenarios),ind] = vios1\n",
    "        totalobjs[(experiment*num_scenarios):((experiment+1)*num_scenarios),ind] = objs \n",
    "        totaltime[(experiment*num_scenarios):((experiment+1)*num_scenarios),ind] = time\n",
    "        ind += 1\n",
    "        np.save(\"totalvios2.npy\", totalvios)\n",
    "        np.save(\"totalvios_train2.npy\", totalvios_train)\n",
    "        np.save(\"totalobjs2.npy\", totalobjs)\n",
    "        np.save(\"totaltime2.npy\", totaltime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "standard_table = pd.read_csv(\"standard_table_3.csv\").iloc[:,1:].values\n",
    "standard_table1 = pd.read_csv(\"standard_table_2.csv\").iloc[:,1:].values\n",
    "reshaped_table = pd.read_csv(\"reshaped_table_2.csv\").iloc[:,1:].values\n",
    "totalvios = np.load(\"totalvios2.npy\")\n",
    "totalvios_train = np.load(\"totalvios_train2.npy\")\n",
    "totalobjs = np.load(\"totalobjs2.npy\")\n",
    "totaltime = np.load(\"totaltime2.npy\")\n",
    "sg_vals1 = np.load(\"sg_vals1.npy\")\n",
    "Ar_saved = np.load(\"Ar_saved.npy\")\n",
    "br_saved = np.load(\"br_saved.npy\")\n",
    "As_saved = np.load(\"As_saved.npy\")\n",
    "bs_saved = np.load(\"bs_saved.npy\")\n",
    "sg_vals = np.load(\"sg_vals1.npy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n",
      "75\n",
      "76\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "81\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n"
     ]
    }
   ],
   "source": [
    "# sg_vals1 = np.zeros((num_scenarios*100,3))\n",
    "for experiment in range(18,100):\n",
    "    print(experiment)\n",
    "    data = data_modes(600,m,[10,20,30],seed = experiment)\n",
    "    train, test = train_test_split(data, test_size=int(data.shape[0]*test_p), random_state=27)\n",
    "    vios, objs, time = sg(train,test)\n",
    "    sg_vals1[(experiment*num_scenarios):((experiment+1)*num_scenarios),0] = vios \n",
    "    sg_vals1[(experiment*num_scenarios):((experiment+1)*num_scenarios),1] = objs \n",
    "    sg_vals1[(experiment*num_scenarios):((experiment+1)*num_scenarios),2] = time\n",
    "    np.save(\"sg_vals1.npy\", sg_vals1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n"
     ]
    }
   ],
   "source": [
    "# Ar_saved = np.zeros((100,m,m))\n",
    "# br_saved = np.zeros((100,m))\n",
    "# As_saved = np.zeros((100,m,m))\n",
    "# bs_saved = np.zeros((100,m))\n",
    "# standard_table2 = np.zeros((1,6))\n",
    "for experiment in range(42,75):\n",
    "    print(experiment)\n",
    "    data = data_modes(600,m,[10,20,30],seed = experiment)\n",
    "    # formulate the ellipsoidal set\n",
    "    u = lropt.UncertainParameter(m,\n",
    "                                    uncertainty_set = lropt.Ellipsoidal(p=2, \n",
    "                                                                    rho=1., data =data, loss =loss))\n",
    "    # formulate cvxpy variable\n",
    "    L = cp.Variable()\n",
    "    s = cp.Variable(n)\n",
    "    y = cp.Variable(n)\n",
    "    Y = cp.Variable((n,m))\n",
    "    r = cp.Parameter(n)\n",
    "    r.value = scenarios[scene][0]\n",
    "\n",
    "    # formulate objective\n",
    "    objective = cp.Minimize(L)\n",
    "    constraints = [-r@y - r@Y@u + (t+h)@s <= L]\n",
    "    for i in range(n):\n",
    "        constraints += [y[i]+Y[i]@u <= s[i]]\n",
    "        constraints += [y[i]<= d[i]+ (Q[i] - Y[i])@u]\n",
    "    constraints += [np.ones(n)@s == C]\n",
    "    constraints += [s <=c, s >=0]\n",
    "\n",
    "    # formulate Robust Problem\n",
    "    prob = lropt.RobustProblem(objective, constraints)\n",
    "    target = -0.015\n",
    "    # solve\n",
    "    test_p = 0.5\n",
    "    seed = 27\n",
    "    train, test = train_test_split(data, test_size=int(data.shape[0]*test_p), random_state=seed)\n",
    "    init = sc.linalg.sqrtm(sc.linalg.inv(np.cov(train.T)))\n",
    "    init_bval = -init@np.mean(train, axis=0)\n",
    "\n",
    "    A_fin = Ar_saved[experiment,:]\n",
    "    b_fin = br_saved[experiment,:]\n",
    "\n",
    "    result3A = As_saved[experiment,:] \n",
    "    result3b = bs_saved[experiment,:]\n",
    "\n",
    "    result4 = prob.grid(epslst = np.linspace(0.9, 1.6, 80), init_A = result3A, init_b = result3b, seed = seed, init_alpha = 0., test_percentage =test_p,scenarios = scenarios, num_scenarios = num_scenarios)\n",
    "    dfgrid = result4.df\n",
    "\n",
    "    s_t = make_table(result3A, result3b, dfgrid,test,train, 0.007, eps = 0,cvar_train = 0, cvar_test = 0)\n",
    "    standard_table2 = np.vstack((standard_table2, s_t))\n",
    "    pd.DataFrame(standard_table2).to_csv(\"standard_table_3.csv\")\n",
    "# reshaped_table = reshaped_table[1:]\n",
    "# standard_table = standard_table[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "standard =  -44588.39638544667 0.01000913252212005 0.0030854012904109585\n"
     ]
    }
   ],
   "source": [
    "print(\"standard = \", np.mean(standard_table2[:,0]), np.mean(standard_table2[:,1]),np.mean(standard_table2[:,5]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n"
     ]
    }
   ],
   "source": [
    "print(np.mean(standard_table2[:,1] >= 0.05))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "table = np.zeros((4,6))\n",
    "table[0,0] =  np.mean(np.mean(reshaped_table[:,6].reshape(-1, 5), axis=1))\n",
    "table[1,0] =  np.mean(np.mean(reshaped_table[:,7].reshape(-1, 5), axis=1))\n",
    "table[2,0] =  np.mean(np.mean(reshaped_table[:,7].reshape(-1, 5), axis=1) >= 0.05)\n",
    "table[3,0] =  np.mean(np.mean(reshaped_table[:,11].reshape(-1, 5), axis=1))\n",
    "\n",
    "table[0,1] =  np.mean(np.mean(reshaped_table[:,12].reshape(-1, 5), axis=1))\n",
    "table[1,1] =  np.mean(np.mean(reshaped_table[:,13].reshape(-1, 5), axis=1))\n",
    "table[2,1] =  np.mean(np.mean(reshaped_table[:,13].reshape(-1, 5), axis=1) >= 0.05)\n",
    "table[3,1] =  np.mean(np.mean(reshaped_table[:,17].reshape(-1, 5), axis=1))\n",
    "\n",
    "table[0,2] =  np.mean(np.mean(standard_table[:,0].reshape(-1, 5), axis=1))\n",
    "table[1,2] =  np.mean(np.mean(standard_table[:,1].reshape(-1, 5), axis=1))\n",
    "table[2,2] =  np.mean(np.mean(standard_table[:,1].reshape(-1, 5), axis=1) >= 0.05)\n",
    "table[3,2] =  np.mean(np.mean(standard_table1[:,5].reshape(-1, 5), axis=1))\n",
    "\n",
    "table[0,3] =  np.mean(np.mean(standard_table1[:,12].reshape(-1, 5), axis=1))\n",
    "table[1,3] =  np.mean(np.mean(standard_table1[:,13].reshape(-1, 5), axis=1))\n",
    "table[2,3] =  np.mean(np.mean(standard_table1[:,13].reshape(-1, 5), axis=1) >= 0.05)\n",
    "table[3,3] =  np.mean(np.mean(standard_table1[:,17].reshape(-1, 5), axis=1))\n",
    "\n",
    "table[0,4] =  np.mean(totalobjs,axis = 0)[2]\n",
    "table[1,4] =  np.mean(totalvios, axis = 0)[2]\n",
    "table[2,4] =  np.mean(np.mean(totalvios[:,2].reshape(-1, 5), axis=1) >= 0.05)\n",
    "table[3,4] =  np.mean(totaltime, axis = 0)[2]\n",
    "\n",
    "table[0,5] =  np.mean(sg_vals[:,1])\n",
    "table[1,5] =  np.mean(sg_vals[:,0])\n",
    "table[2,5] =  np.mean(sg_vals[:,0] >= 0.05)\n",
    "table[3,5] =  np.mean(sg_vals[:,2])\n",
    "pd.DataFrame(table).to_csv(\"table_vals2.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.434"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(sg_vals[:,0] >= 0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  },
  "vscode": {
   "interpreter": {
    "hash": "30c3c09dd4e997e3a7859f8ad32d57c686543aa6231cf005f8af1a5d90496772"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
