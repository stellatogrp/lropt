{
    "cells": [
        {
            "attachments": {},
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## My First Robust Problem"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [],
            "source": [
                "import cvxpy as cp\n",
                "import numpy as np\n",
                "import lropt\n",
                "import warnings\n",
                "warnings.filterwarnings(\"ignore\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [],
            "source": [
                "n = 2\n",
                "P = np.array([[1.,2],[1.,0.]])\n",
                "A = np.eye(2)\n",
                "b = np.zeros(2)\n",
                "c = np.array([2,1])\n",
                "a = np.array([.4,0.5])\n",
                "\n",
                "u_1 = lropt.UncertainParameter(n,\n",
                "                            uncertainty_set=lropt.Ellipsoidal(A=A, b=b))\n",
                "\n",
                "# u_2 = lropt.UncertainParameter(n,\n",
                "#                             uncertainty_set=lropt.Ellipsoidal(p=2, A= A, b = b))\n",
                "\n",
                "x = cp.Variable(n)\n",
                "\n",
                "objective = cp.Minimize(c @ x)\n",
                "constraints = [(P @ u_1 + a) @ x <= 10]\n",
                "\n",
                "prob = lropt.RobustProblem(objective, constraints)\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "optimal value =  -20.762982727800672\n",
                        "optimal solution =  [ -1.83919766 -17.0845874 ]\n"
                    ]
                }
            ],
            "source": [
                "prob.solve()\n",
                "\n",
                "print(\"optimal value = \", objective.value)\n",
                "print(\"optimal solution = \", x.value)\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": []
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "lropt",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.10.6"
        },
        "orig_nbformat": 4,
        "vscode": {
            "interpreter": {
                "hash": "e3ed6dde042e78d86e091991aef4e6276872e8fbcb7e1edcb6e9eacd7157f213"
            }
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}
